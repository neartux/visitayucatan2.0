<?php

namespace VisitaYucatanBundle\Repository;
use Doctrine\ORM\EntityNotFoundException;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use VisitaYucatanBundle\Entity\Tourimagen;
use VisitaYucatanBundle\utils\Estatuskeys;
use VisitaYucatanBundle\utils\Generalkeys;

/**
 * TourimagenRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TourimagenRepository extends \Doctrine\ORM\EntityRepository{

    public function findTourImagesByIdTour($idTour){
        return $this->findBy(array('tour' => $idTour, 'estatus' => Estatuskeys::ESTATUS_ACTIVO));
    }

    public function uploadTourImage($originalName, $nameImage, $folio, $path, $tipoArchivo, $idTour){
        if(! $this->existTour($idTour)){
            throw new EntityNotFoundException('El tour con id ' . $idTour . " no se encontro");
        }
        $em = $this->getEntityManager();

        $tourImage = new Tourimagen();
        $tourImage->setNombre($nameImage);
        $tourImage->setNombreoriginal($originalName);
        $tourImage->setFolio($folio);
        $tourImage->setPath($path);
        $tourImage->setTipoarchivo($tipoArchivo);
        $tourImage->setPrincipal(Generalkeys::BOOLEAN_FALSE);
        $tourImage->setFechacreacion(new \DateTime());
        $tourImage->setEstatus($em->getReference('VisitaYucatanBundle:Estatus', Estatuskeys::ESTATUS_ACTIVO));
        $tourImage->setTour($em->getReference('VisitaYucatanBundle:Tour', $idTour));

        $em->persist($tourImage);
        $em->flush();
    }

    public function deleteImageTour($idImageTour){
        $em = $this->getEntityManager();
        $imageTour = $this->find($idImageTour);
        if(! $imageTour){
            throw new EntityNotFoundException('El La imagen con id ' . $idImageTour . " no se encontro");
        }
        if(! unlink($imageTour->getPath())){
            throw new FileException('No se pudo eliminar la imagen '.$imageTour->getNombreoriginal());
        }
        $imageTour->setEstatus($em->getReference('VisitaYucatanBundle:Estatus', Estatuskeys::ESTATUS_INACTIVO));
        $em->persist($imageTour);
        $em->flush();
    }

    public function setPrincipalImageTour($idTour, $idImageTour){
        $imagesTour =$this->findTourImagesByIdTour($idTour);

        if(count($imagesTour) <= Generalkeys::NUMBER_ZERO){
            throw new \Exception('No se encontraron imagenes para el tour '.$idTour);
        }
        $em = $this->getEntityManager();

        foreach($imagesTour as $image){
            if($image->getId() == $idImageTour){
                $image->setPrincipal(Generalkeys::BOOLEAN_TRUE);
            }else{
                $image->setPrincipal(Generalkeys::BOOLEAN_FALSE);
            }
            $em->persist($image);
            $em->flush();
        }
    }

    public function existTour($id){
        $em = $this->getEntityManager();
        if($em->getRepository('VisitaYucatanBundle:Tour')->find($id)){
            return Generalkeys::BOOLEAN_TRUE;
        }
        return Generalkeys::BOOLEAN_FALSE;
    }

    public function findNextFolio(){

        $sql = "SELECT MAX(tour_imagen.folio) AS folio
				FROM tour_imagen
				WHERE tour_imagen.id_estatus=:estatusActivo LIMIT ".Generalkeys::NUMBER_ONE;
        try{

            $params['estatusActivo'] = Estatuskeys::ESTATUS_ACTIVO;

            $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
            $stmt->execute($params);
            $result = $stmt->fetch();
            $folio = (int)$result['folio'];

            return ($folio + Generalkeys::NUMBER_ONE);

        } catch(\Doctrine\ORM\NoResultException $e){

            return Generalkeys::NOT_FOUND_FOLIO;
        }
    }
}
