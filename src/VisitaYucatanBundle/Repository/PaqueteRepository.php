<?php

namespace VisitaYucatanBundle\Repository;

use VisitaYucatanBundle\utils\Estatuskeys;
use VisitaYucatanBundle\utils\Generalkeys;
use VisitaYucatanBundle\Entity\Paquete;
use VisitaYucatanBundle\Entity\PaqueteIdioma;

/**
 * PaqueteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaqueteRepository extends \Doctrine\ORM\EntityRepository {

	public function getPaquetes($idIdioma, $idMoneda, $offset, $limit){
		$em = $this->getEntityManager();
		$sql = "SELECT paquete.id,paquete_idioma.descripcion AS nombrepaquete,paquete_idioma.descripcioncorta,paquete_idioma.descripcionlarga,paquete.circuito,paquete_idioma.incluye,
				paquete_imagen.path AS imagen,moneda.simbolo,
				(select min(paquete_combinacion_hotel.costosencillo)/moneda.tipo_cambio from paquete_combinacion_hotel where paquete_combinacion_hotel.id_paquete = paquete.id) as sencilla
				FROM paquete
				INNER JOIN paquete_idioma ON paquete.id = paquete_idioma.id_paquete AND paquete_idioma.id_estatus = :estatusActivo
				INNER JOIN idioma ON idioma.id = paquete_idioma.id_idioma AND idioma.id = :idioma AND idioma.id_estatus = :estatusActivo
				INNER JOIN moneda ON moneda.id = :moneda AND moneda.id_estatus = :estatusActivo
				LEFT JOIN paquete_imagen ON paquete.id = paquete_imagen.id_paquete AND paquete_imagen.id_estatus = :estatusActivo
				WHERE paquete.id_estatus = :estatusActivo
				AND paquete.promovido = TRUE
				ORDER BY sencilla LIMIT ". $limit ." OFFSET ".$offset;
		$params['estatusActivo'] = Estatuskeys::ESTATUS_ACTIVO;
		$params['idioma'] = $idIdioma;
		$params['moneda'] = $idMoneda;

		$stmt = $em->getConnection()->prepare($sql);
		$stmt->execute($params);
		return $stmt->fetchAll();
	}

	public function findAllPaquetes(){
		$em = $this->getEntityManager();
		$sql='SELECT  p.id, p.descripcion as nombrepaquete, p.circuito, p.promovido
			  FROM paquete p
			  inner join paquete_idioma pi on pi.id_idioma = :idioma AND pi.id_paquete = p.id
			  WHERE p.id_estatus = :estatusActivo';
		$params['estatusActivo'] = Estatuskeys::ESTATUS_ACTIVO;
		$params['idioma'] = Generalkeys::IDIOMA_ESPANOL;
		$stmt = $em->getConnection()->prepare($sql);
		$stmt->execute($params);
		return $stmt->fetchAll();
	}

	public function createPaquete($paqueteTo){
		$em = $this->getEntityManager();
		$paquete = new Paquete();
		$paquete->setDescripcion($paqueteTo->getDescripcion());
		$paquete->setCircuito($paqueteTo->getCircuito());
		$paquete->setPromovido(Generalkeys::BOOLEAN_FALSE);
		$paquete->setEstatus($em->getReference('VisitaYucatanBundle:Estatus', Estatuskeys::ESTATUS_ACTIVO));
		$em->persist($paquete);

		$paqueteIdioma = new PaqueteIdioma();
		$paqueteIdioma->setIdioma($em->getReference('VisitaYucatanBundle:Idioma', Generalkeys::IDIOMA_ESPANOL));
		$paqueteIdioma->setEstatus($em->getReference('VisitaYucatanBundle:Estatus', Estatuskeys::ESTATUS_ACTIVO));
		$paqueteIdioma->setPaquete($paquete);
		$paqueteIdioma->setDescripcion($paqueteTo->getDescripcion());
		$paqueteIdioma->setDescripcionCorta('');
		$paqueteIdioma->setDescripcionLarga('');
		$paqueteIdioma->setIncluye('');

		$em->persist($paqueteIdioma);

		$em->flush();
	}
	public function updatePaquete($paqueteTO) {
        $em = $this->getEntityManager();
        $paqueteUpdate = $this->find($paqueteTO->getId());
        if (!$paqueteUpdate) {
            throw new EntityNotFoundException('El paquete con id ' . $paqueteTO->getId() . " no se encontro");
        }
        // Actualiza la informacion del tour
        $paqueteUpdate->setDescripcion($paqueteTO->getDescripcion());
        $paqueteUpdate->setCircuito($paqueteTO->getCircuito());
        $em->persist($paqueteUpdate);

        /*$paqueteIdiomaTO = $em->getRepository('VisitaYucatanBundle:PaqueteIdioma')->find($paqueteTO->getId());
        if (!$paqueteIdioma) {
            throw new EntityNotFoundException('El paquete idioma ' . $paqueteIdiomaTO->getId() . " no se encontro");
        }
        $paqueteIdiomaTO->setDescripcion($paqueteTO->getDescripcion());*/

        // Actualiza la informacion de tarigas para el origen seleccionado
        /*$tourOrigen = $em->getRepository('VisitaYucatanBundle:TourOrigen')->find($tourTO->getIdtourorigen());
        if (!$tourOrigen) {
            throw new EntityNotFoundException('El tour origen ' . $tourTO->getIdtourorigen() . " no se encontro");
        }
        $tourOrigen->setTarifaAdulto($tourTO->getTarifaadulto());
        $tourOrigen->setTarifaMenor($tourTO->getTarifamenor());*/

        $em->flush();
    }
	public function deletePaquete($idPaquete){
		$em = $this->getEntityManager();
		$paquete = $em->getRepository('VisitaYucatanBundle:Paquete')->find($idPaquete);
		if (!$paquete) {
		   throw new EntityNotFoundException('El tour con id ' . $idPaquete . " no se encontro");
		}
		$paquete->setEstatus($em->getReference('VisitaYucatanBundle:Estatus', Estatuskeys::ESTATUS_INACTIVO));
		$em->persist($paquete);
		$em->flush();
	}
}
