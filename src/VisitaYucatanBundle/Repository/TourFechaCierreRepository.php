<?php

namespace VisitaYucatanBundle\Repository;
use Doctrine\ORM\EntityNotFoundException;
use VisitaYucatanBundle\Entity\TourFechaCierre;
use VisitaYucatanBundle\utils\Estatuskeys;

/**
 * TourFechaCierreRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TourFechaCierreRepository extends \Doctrine\ORM\EntityRepository {

    public function findFechasCierreByTour($idTour) {
        $em = $this->getEntityManager();
        $sql = "SELECT * FROM tour_fecha_cierre 
                WHERE tour_fecha_cierre.id_tour = :tour 
                AND tour_fecha_cierre.id_estatus = :estatus
                AND tour_fecha_cierre.fechaFin >= curdate()
                ORDER BY tour_fecha_cierre.id DESC";
        $params['estatus'] = Estatuskeys::ESTATUS_ACTIVO;
        $params['tour'] = $idTour;
        $stmt = $em->getConnection()->prepare($sql);
        $stmt->execute($params);
        return $stmt->fetchAll();
    }

    public function createFechaCierre($idTour, $fechaInicio, $fechaFin){
        $em = $this->getEntityManager();

        $fechaCierre = new TourFechaCierre();
        $fechaCierre->setFechaInicio(new \DateTime($fechaInicio));
        $fechaCierre->setFechaFin(new \DateTime($fechaFin));
        $fechaCierre->setTour($em->getReference('VisitaYucatanBundle:Tour', $idTour));
        $fechaCierre->setEstatus($em->getReference('VisitaYucatanBundle:Estatus', Estatuskeys::ESTATUS_ACTIVO));

        $em->persist($fechaCierre);
        $em->flush();
    }

    public function updateFechaCierre($idFechaCierre, $fechaInicio, $fechaFin){
        $em = $this->getEntityManager();

        $fechaCierre = $this->find($idFechaCierre);
        if(! $fechaCierre){
            throw new EntityNotFoundException('La fecha cierre ' . $idFechaCierre . " no se pudo actualizar");
        }
        $fechaCierre->setFechaInicio(new \DateTime($fechaInicio));
        $fechaCierre->setFechaFin(new \DateTime($fechaFin));

        $em->persist($fechaCierre);
        $em->flush();
    }

    public function deleteFechaCierre($idFechaCierre){
        $em = $this->getEntityManager();

        $fechaCierre = $this->find($idFechaCierre);
        if(! $fechaCierre){
            throw new EntityNotFoundException('La fecha cierre ' . $idFechaCierre . " no se pudo eliminar");
        }
        $fechaCierre->setEstatus($em->getReference('VisitaYucatanBundle:Estatus', Estatuskeys::ESTATUS_INACTIVO));

        $em->persist($fechaCierre);
        $em->flush();
    }

}
