<?php

namespace VisitaYucatanBundle\Repository;
use Doctrine\ORM\EntityNotFoundException;
use VisitaYucatanBundle\Entity\Articulo;
use VisitaYucatanBundle\utils\Estatuskeys;
use VisitaYucatanBundle\utils\Generalkeys;

/**
 * ArticuloRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticuloRepository extends \Doctrine\ORM\EntityRepository {

    public function findAllArticulos($tipoArticulo){
        $em = $this->getEntityManager();

        $sql = "SELECT articulo.id,articulo.descripcion,articulo_idioma.nombre,articulo_idioma.descripcion AS descripcionidioma
                FROM articulo
                LEFT JOIN articulo_idioma ON articulo.id = articulo_idioma.id_articulo AND articulo_idioma.id_idioma = :idioma
                LEFT JOIN idioma ON idioma.id = articulo_idioma.id_idioma AND idioma.id = :idioma AND idioma.id_estatus = :estatus
                WHERE articulo.tipoarticulo = :tipoArticulo
                AND articulo.id_estatus = :estatus";

        $params['tipoArticulo'] = $tipoArticulo;
        $params['idioma'] = Generalkeys::IDIOMA_ESPANOL;
        $params['estatus'] = Estatuskeys::ESTATUS_ACTIVO;

        $stmt = $em->getConnection()->prepare($sql);
        $stmt->execute($params);
        return $stmt->fetchAll();
    }

    public function getArticuloPage($tipoArticulo, $seccion, $idioma){
        $em = $this->getEntityManager();

        $sql = "SELECT articulo_idioma.nombre,articulo_idioma.descripcion
                FROM articulo
                INNER JOIN articulo_idioma ON articulo.id = articulo_idioma.id_articulo
                INNER JOIN idioma ON idioma.id = articulo_idioma.id_idioma AND idioma.id = :idioma AND idioma.id_estatus = :estatus
                WHERE articulo.tipoarticulo = :tipoArticulo
                AND articulo.seccionarticulo = :seccionArticulo
                AND articulo.id_estatus = :estatus";

        $params['tipoArticulo'] = $tipoArticulo;
        $params['seccionArticulo'] = $seccion;
        $params['idioma'] = $idioma;
        $params['estatus'] = Estatuskeys::ESTATUS_ACTIVO;

        $stmt = $em->getConnection()->prepare($sql);
        $stmt->execute($params);
        return $stmt->fetch();
    }

    public function createArticulo($nombre, $tipoArticulo, $seccionArticulo){
        $em = $this->getEntityManager();
        $articulo = new Articulo();
        $articulo->setDescripcion($nombre);
        $articulo->setTipoArticulo($tipoArticulo);
        if(! is_null($seccionArticulo)){
            $articulo->setSeccionArticulo($seccionArticulo);
        }
        $articulo->setEstatus($em->getReference('VisitaYucatanBundle:Estatus', Estatuskeys::ESTATUS_ACTIVO));

        $em->persist($articulo);
        $em->flush();
        return $articulo->getId();
    }

    public function updateArticulo($idArticulo, $nombre){
        $em = $this->getEntityManager();

        $articulo = $this->find($idArticulo);

        if(! $articulo){
            throw new EntityNotFoundException('El articulo con id ' . $idArticulo . " no se encontro");
        }

        $articulo->setDescripcion($nombre);

        $em->persist($articulo);
        $em->flush();
    }

    public function deleteArticulo($idArticulo){
        $em = $this->getEntityManager();
        //$articulo = $em->getRepository('VisitaYucatanBundle:Articulo')->find($idArticulo);
        $articulo = $this->find($idArticulo);
          
        if(! $articulo){
            throw new EntityNotFoundException('El articulo con id ' . $idArticulo . 
                " no se encontro");
        }


             
        $articulo->setEstatus($em->getReference('VisitaYucatanBundle:Estatus', Estatuskeys::ESTATUS_INACTIVO));
        $em->persist($articulo); 
        $em->flush();
    }

    public function deletePeninsula($idPeninsula){
        $em = $this->getEntityManager();
        $peninsula = $em->getRepository('VisitaYucatanBundle:Articulo')->find($idPeninsula);
        if(! $peninsula){
            throw new EntityNotFoundException('La peninsula con id '.$idPeninsula." no se encontro");
        }
        $peninsula->setEstatus($em->getReference('VisitaYucatanBundle:Estatus', Estatuskeys::ESTATUS_INACTIVO));
        $em->persist($peninsula);
        $em->flush();
    }
   
   public function getPeninsulas($idioma, $offset, $limit){

    $em = $this->getEntityManager();
    $sql = "SELECT articulo.id, articulo_idioma.nombre,articulo_idioma.descripcion AS descripcionidioma
                FROM articulo
                inner JOIN articulo_idioma ON articulo.id = articulo_idioma.id_articulo AND articulo_idioma.id_idioma = :idioma
                inner JOIN idioma ON idioma.id = articulo_idioma.id_idioma AND idioma.id = :idioma  AND idioma.id_estatus = :estatusActivo
                WHERE articulo.tipoarticulo = 'peninsula'
                AND articulo.id_estatus = :estatusActivo";

    $params['estatusActivo'] = Estatuskeys::ESTATUS_ACTIVO;
    $params['idioma'] = $idioma;
    $stmt = $em->getConnection()->prepare($sql);
    $stmt->execute($params);
    return $stmt->fetchAll();
   }

}
